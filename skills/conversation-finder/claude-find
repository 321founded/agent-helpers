#!/bin/bash

# Claude conversation finder with context
# Usage: claude-find [optional-keyword] [--here] [--open]

CLAUDE_DIR="$HOME/.claude"
PROJECTS_DIR="$CLAUDE_DIR/projects"

KEYWORD=""
FILTER_CWD=false
OPEN_MODE=false
AUTO_OPEN=false

# Parse arguments
for arg in "$@"; do
    if [ "$arg" = "--here" ]; then
        FILTER_CWD=true
    elif [ "$arg" = "--open" ]; then
        OPEN_MODE=true
    elif [ "$arg" = "--auto" ]; then
        AUTO_OPEN=true
    else
        KEYWORD="$arg"
    fi
done

# Get current directory for filtering
CURRENT_DIR=$(pwd)
CURRENT_PROJECT=$(echo "$CURRENT_DIR" | sed 's|/|-|g')

# Temporary file for results
RESULTS_FILE=$(mktemp)

# Function to extract and display conversation info
show_conversation() {
    local session_file="$1"
    local project_dir=$(dirname "$session_file")
    local project_name=$(basename "$project_dir" | sed 's/^-//;s/-/\//g')
    local session_id=$(basename "$session_file" .jsonl)

    # Filter by current directory if --here flag is set
    if [ "$FILTER_CWD" = true ]; then
        local session_cwd=$(grep '"cwd"' "$session_file" | head -1 | jq -r '.cwd // ""' 2>/dev/null)
        if [ "$session_cwd" != "$CURRENT_DIR" ]; then
            return
        fi
    fi

    # Extract summary
    local summary=$(head -1 "$session_file" | jq -r 'select(.type=="summary") | .summary // ""' 2>/dev/null)

    # Get last timestamp (to handle compacted sessions)
    local last_timestamp=$(tac "$session_file" 2>/dev/null | grep -m1 '"timestamp"' | jq -r '.timestamp // ""' 2>/dev/null)
    local first_timestamp=$(grep '"type":"user"' "$session_file" | head -1 | jq -r '.timestamp // ""' 2>/dev/null)

    # Use last timestamp for sorting (most recent activity)
    local timestamp="${last_timestamp:-$first_timestamp}"
    local date_str=$(date -d "$timestamp" "+%Y-%m-%d %H:%M" 2>/dev/null || echo "Unknown")

    # Check if session was compacted
    local is_compacted=$(grep -q '"type":"compact"' "$session_file" && echo " [compacted]" || echo "")

    # Get first user message
    local first_msg=$(grep '"type":"user"' "$session_file" | head -1 | jq -r '.message.content // ""' 2>/dev/null | tr '\n' ' ' | cut -c1-100)

    # Get last user message
    local last_msg=$(grep '"type":"user"' "$session_file" | tail -1 | jq -r '.message.content // ""' 2>/dev/null | tr '\n' ' ' | cut -c1-100)

    # Count messages
    local msg_count=$(grep -c '"type":"user"' "$session_file" 2>/dev/null || echo "0")

    # If keyword provided, check if it matches
    if [ -n "$KEYWORD" ]; then
        if ! grep -qi "$KEYWORD" "$session_file" 2>/dev/null; then
            return
        fi
    fi

    # Output with timestamp for sorting
    echo "${timestamp}|${date_str}|${project_name}|${summary}|${first_msg}|${last_msg}|${msg_count}|${session_id}|${is_compacted}" >> "$RESULTS_FILE"
}

echo "Finding conversations..."
if [ -n "$KEYWORD" ]; then
    echo "Filtering by: $KEYWORD"
fi
if [ "$FILTER_CWD" = true ]; then
    echo "In directory: $CURRENT_DIR"
fi
echo ""

# Process all session files
find "$PROJECTS_DIR" -name "*.jsonl" -type f | while read -r session_file; do
    show_conversation "$session_file"
done

# Sort by timestamp (newest first) and display
if [ -s "$RESULTS_FILE" ]; then
    # If auto-open mode, open the first result directly
    if [ "$AUTO_OPEN" = true ]; then
        IFS='|' read -r timestamp date_str project summary first_msg last_msg msg_count session_id is_compacted < <(sort -r "$RESULTS_FILE" | head -1)

        session_file=$(find "$PROJECTS_DIR" -name "${session_id}.jsonl" -type f)
        session_cwd=$(grep '"cwd"' "$session_file" | head -1 | jq -r '.cwd // "$HOME"' 2>/dev/null)

        echo "Opening: [$date_str] $project"
        echo "Session: $session_id"
        echo "Directory: $session_cwd"
        echo ""

        xdg-terminal-exec bash -c "cd '$session_cwd' && /home/alexis/data/node/.npm-global/bin/claude --dangerously-skip-permissions --resume $session_id; exec bash"
        rm -f "$RESULTS_FILE"
        exit 0
    fi

    # If open mode, let user select and open
    if [ "$OPEN_MODE" = true ]; then
        echo "Select a conversation to open (enter number):"
        echo ""

        # Store results in array for selection
        mapfile -t results < <(sort -r "$RESULTS_FILE" | head -30)

        # Display numbered list
        for i in "${!results[@]}"; do
            IFS='|' read -r timestamp date_str project summary first_msg last_msg msg_count session_id is_compacted <<< "${results[$i]}"
            num=$((i + 1))

            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "$num. [$date_str] $project ($msg_count messages)$is_compacted"

            if [ -n "$summary" ]; then
                echo "   📝 $summary"
            fi

            if [ -n "$first_msg" ]; then
                echo "   💬 First: $first_msg..."
            fi

            if [ "$first_msg" != "$last_msg" ] && [ -n "$last_msg" ]; then
                echo "   💬 Last: $last_msg..."
            fi
            echo ""
        done

        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        read -p "Enter number (or 'q' to quit): " choice

        if [ "$choice" = "q" ] || [ "$choice" = "Q" ]; then
            echo "Cancelled"
            rm -f "$RESULTS_FILE"
            exit 0
        fi

        # Validate input
        if ! [[ "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt "${#results[@]}" ]; then
            echo "Invalid selection"
            rm -f "$RESULTS_FILE"
            exit 1
        fi

        # Extract session ID from selected result
        selected_idx=$((choice - 1))
        IFS='|' read -r timestamp date_str project summary first_msg last_msg msg_count session_id is_compacted <<< "${results[$selected_idx]}"

        # Get the cwd from the session file to open in the right directory
        session_file=$(find "$PROJECTS_DIR" -name "${session_id}.jsonl" -type f)
        session_cwd=$(grep '"cwd"' "$session_file" | head -1 | jq -r '.cwd // "$HOME"' 2>/dev/null)

        echo ""
        echo "Opening conversation in new terminal..."
        echo "Session: $session_id"
        echo "Directory: $session_cwd"

        # Open in default terminal with the right directory
        xdg-terminal-exec bash -c "cd '$session_cwd' && /home/alexis/data/node/.npm-global/bin/claude --dangerously-skip-permissions --resume $session_id; exec bash"

    else
        # Normal display mode
        sort -r "$RESULTS_FILE" | head -30 | nl -w2 -s'. ' | while IFS='|' read -r num timestamp date_str project summary first_msg last_msg msg_count session_id is_compacted; do
            # Clean up line number
            num=$(echo "$num" | xargs)

            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "$num [$date_str] $project ($msg_count messages)$is_compacted"

            if [ -n "$summary" ]; then
                echo "   📝 $summary"
            fi

            if [ -n "$first_msg" ]; then
                echo "   💬 First: $first_msg..."
            fi

            if [ "$first_msg" != "$last_msg" ] && [ -n "$last_msg" ]; then
                echo "   💬 Last: $last_msg..."
            fi

            echo "   ▶ claude --resume $session_id"
            echo ""
        done

        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "Showing last 30 conversations (sorted by last activity)"
    fi
else
    echo "No conversations found"
    if [ -n "$KEYWORD" ]; then
        echo "Try a different keyword or run without arguments to see all"
    fi
fi

rm -f "$RESULTS_FILE"
